need    Hypervisor::IBM::POWER::HMC::REST::Config;
need    Hypervisor::IBM::POWER::HMC::REST::Config::Analyze;
need    Hypervisor::IBM::POWER::HMC::REST::Config::Dump;
need    Hypervisor::IBM::POWER::HMC::REST::Config::Optimize;
use     Hypervisor::IBM::POWER::HMC::REST::Config::Traits;
need    Hypervisor::IBM::POWER::HMC::REST::ETL::XML;
unit    class Hypervisor::IBM::POWER::HMC::REST::ManagedSystems::ManagedSystem::AssociatedSystemCapabilities:api<1>:auth<Mark Devine (mark@markdevine.com)>
            does Hypervisor::IBM::POWER::HMC::REST::Config::Analyze
            does Hypervisor::IBM::POWER::HMC::REST::Config::Dump
            does Hypervisor::IBM::POWER::HMC::REST::Config::Optimize
            does Hypervisor::IBM::POWER::HMC::REST::ETL::XML;

my      Bool                                        $names-checked  = False;
my      Bool                                        $analyzed       = False;
my      Lock                                        $lock           = Lock.new;
has     Hypervisor::IBM::POWER::HMC::REST::Config   $.config        is required;
has     Bool                                        $.initialized   = False;

has     Str                                         $.ActiveLogicalPartitionMobilityCapable                 is conditional-initialization-attribute;
has     Str                                         $.ActiveLogicalPartitionSharedIdeProcessorsCapable      is conditional-initialization-attribute;
has     Str                                         $.ActiveMemoryDeduplicationCapable                      is conditional-initialization-attribute;
has     Str                                         $.ActiveMemoryExpansionCapable                          is conditional-initialization-attribute;
has     Str                                         $.ActiveMemoryMirroringCapable                          is conditional-initialization-attribute;
has     Str                                         $.ActiveMemorySharingCapable                            is conditional-initialization-attribute;
has     Str                                         $.AddressBroadcastPolicyCapable                         is conditional-initialization-attribute;
has     Str                                         $.AIXCapable                                            is conditional-initialization-attribute;
has     Str                                         $.AutorecoveryPowerOnCapable                            is conditional-initialization-attribute;
has     Str                                         $.BarrierSynchronizationRegisterCapable                 is conditional-initialization-attribute;
has     Str                                         $.CapacityOnDemandMemoryCapable                         is conditional-initialization-attribute;
has     Str                                         $.CapacityOnDemandProcessorCapable                      is conditional-initialization-attribute;
has     Str                                         $.CAPICapable                                           is conditional-initialization-attribute;
has     Str                                         $.CustomLogicalPartitionPlacementCapable                is conditional-initialization-attribute;
has     Str                                         $.ElectronicErrorReportingCapable                       is conditional-initialization-attribute;
has     Str                                         $.ExternalIntrusionDetectionCapable                     is conditional-initialization-attribute;
has     Str                                         $.FirmwarePowerSaverCapable                             is conditional-initialization-attribute;
has     Str                                         $.HardwareDiscoveryCapable                              is conditional-initialization-attribute;
has     Str                                         $.HardwareMemoryCompressionCapable                      is conditional-initialization-attribute;
has     Str                                         $.HardwareMemoryEncryptionCapable                       is conditional-initialization-attribute;
has     Str                                         $.HardwarePowerSaverCapable                             is conditional-initialization-attribute;
has     Str                                         $.HostChannelAdapterCapable                             is conditional-initialization-attribute;
has     Str                                         $.HugePageMemoryCapable                                 is conditional-initialization-attribute;
has     Str                                         $.HugePageMemoryOverrideCapable                         is conditional-initialization-attribute;
has     Str                                         $.IBMiCapable                                           is conditional-initialization-attribute;
has     Str                                         $.IBMiLogicalPartitionMobilityCapable                   is conditional-initialization-attribute;
has     Str                                         $.IBMiLogicalPartitionSuspendCapable                    is conditional-initialization-attribute;
has     Str                                         $.IBMiNetworkInstallCapable                             is conditional-initialization-attribute;
has     Str                                         $.IBMiRestrictedIOModeCapable                           is conditional-initialization-attribute;
has     Str                                         $.IBMiNetworkInstallVlanCapable                         is conditional-initialization-attribute;
has     Str                                         $.InactiveLogicalPartitionMobilityCapable               is conditional-initialization-attribute;
has     Str                                         $.IntelligentPlatformManagementInterfaceCapable         is conditional-initialization-attribute;
has     Str                                         $.LinuxCapable                                          is conditional-initialization-attribute;
has     Str                                         $.LogicalHostEthernetAdapterCapable                     is conditional-initialization-attribute;
has     Str                                         $.LogicalPartitionAffinityGroupCapable                  is conditional-initialization-attribute;
has     Str                                         $.LogicalPartitionAvailabilityPriorityCapable           is conditional-initialization-attribute;
has     Str                                         $.LogicalPartitionEnergyManagementCapable               is conditional-initialization-attribute;
has     Str                                         $.LogicalPartitionProcessorCompatibilityModeCapable     is conditional-initialization-attribute;
has     Str                                         $.LogicalPartitionRemoteRestartCapable                  is conditional-initialization-attribute;
has     Str                                         $.LogicalPartitionSuspendCapable                        is conditional-initialization-attribute;
has     Str                                         $.MemoryMirroringCapable                                is conditional-initialization-attribute;
has     Str                                         $.MicroLogicalPartitionCapable                          is conditional-initialization-attribute;
has     Str                                         $.PowerVMLogicalPartitionSimplifiedRemoteRestartCapable is conditional-initialization-attribute;
has     Str                                         $.RedundantErrorPathReportingCapable                    is conditional-initialization-attribute;
has     Str                                         $.RemoteRestartToggleCapable                            is conditional-initialization-attribute;
has     Str                                         $.ServiceProcessorConcurrentMaintenanceCapable          is conditional-initialization-attribute;
has     Str                                         $.ServiceProcessorFailoverCapable                       is conditional-initialization-attribute;
has     Str                                         $.ServiceProcessorAutonomicIPLCapable                   is conditional-initialization-attribute;
has     Str                                         $.SharedEthernetFailoverCapable                         is conditional-initialization-attribute;
has     Str                                         $.SharedProcessorPoolCapable                            is conditional-initialization-attribute;
has     Str                                         $.SRIOVCapable                                          is conditional-initialization-attribute;
has     Str                                         $.SRIOVRoCECapable                                      is conditional-initialization-attribute;
has     Str                                         $.SwitchNetworkInterfaceMessagePassingCapable           is conditional-initialization-attribute;
has     Str                                         $.SystemPartitionProcessorLimitCapable                  is conditional-initialization-attribute;
has     Str                                         $.Telnet5250ApplicationCapable                          is conditional-initialization-attribute;
has     Str                                         $.TurboCoreCapable                                      is conditional-initialization-attribute;
has     Str                                         $.VirtualEthernetAdapterDynamicLogicalPartitionCapable  is conditional-initialization-attribute;
has     Str                                         $.VirtualEthernetQualityOfServiceCapable                is conditional-initialization-attribute;
has     Str                                         $.VirtualFiberChannelCapable                            is conditional-initialization-attribute;
has     Str                                         $.VirtualIOServerCapable                                is conditional-initialization-attribute;
has     Str                                         $.VirtualizationEngineTechnologiesActivationCapable     is conditional-initialization-attribute;
has     Str                                         $.VirtualServerNetworkingPhase2Capable                  is conditional-initialization-attribute;
has     Str                                         $.VirtualSwitchCapable                                  is conditional-initialization-attribute;
has     Str                                         $.VirtualTrustedPlatformModuleCapable                   is conditional-initialization-attribute;
has     Str                                         $.VLANStatisticsCapable                                 is conditional-initialization-attribute;
has     Str                                         $.VirtualEthernetCustomMACAddressCapable                is conditional-initialization-attribute;
has     Str                                         $.ManagementVLANForControlChannelCapable                is conditional-initialization-attribute;
has     Str                                         $.VirtualNICDedicatedSRIOVCapable                       is conditional-initialization-attribute;
has     Str                                         $.VirtualNICSharedSRIOVCapable                          is conditional-initialization-attribute;
has     Str                                         $.DynamicPlatformOptimizationCapable                    is conditional-initialization-attribute;
has     Str                                         $.VirtualNICFailOverCapable                             is conditional-initialization-attribute;
has     Str                                         $.AdvancedBootListSupportCapable                        is conditional-initialization-attribute;
has     Str                                         $.DynamicSimplifiedRemoteRestartToggleCapable           is conditional-initialization-attribute;
has     Str                                         $.IBMiNativeIOCapable                                   is conditional-initialization-attribute;
has     Str                                         $.CustomPhysicalPageTableRatioCapable                   is conditional-initialization-attribute;
has     Str                                         $.HardwareAcceleratorCapable                            is conditional-initialization-attribute;
has     Str                                         $.PlatformMemoryMirroringCapableIfLicensed              is conditional-initialization-attribute;
has     Str                                         $.PlatformMemoryMirroringLicensed                       is conditional-initialization-attribute;
has     Str                                         $.PlatformMemoryMirroringCapabilityKnown                is conditional-initialization-attribute;
has     Str                                         $.PartitionSecureBootCapable                            is conditional-initialization-attribute;
has     Str                                         $.DedicatedProcessorPartitionCapable                    is conditional-initialization-attribute;
has     Str                                         $.PersistentMemoryCapable                               is conditional-initialization-attribute;
has     Str                                         $.SRIOVMigrationCapable                                 is conditional-initialization-attribute;

method  xml-name-exceptions () { return set <Metadata>; }

submethod TWEAK {
    self.config.diag.post:      self.^name ~ '::' ~ &?ROUTINE.name if %*ENV<HIPH_SUBMETHOD>;
    my $proceed-with-name-check = False;
    my $proceed-with-analyze    = False;
    $lock.protect({
        if !$analyzed           { $proceed-with-analyze    = True; $analyzed      = True; }
        if !$names-checked      { $proceed-with-name-check = True; $names-checked = True; }
    });
    self.etl-node-name-check    if $proceed-with-name-check;
    self.init;
    self.analyze                if $proceed-with-analyze;
    self;
}

method init () {
    self.config.diag.post:                                  self.^name ~ '::' ~ &?ROUTINE.name if %*ENV<HIPH_METHOD>;
    $!ActiveLogicalPartitionMobilityCapable                 = self.etl-text(:TAG<ActiveLogicalPartitionMobilityCapable>,                    :$!xml) if self.attribute-is-accessed(self.^name, 'ActiveLogicalPartitionMobilityCapable');
    $!ActiveLogicalPartitionSharedIdeProcessorsCapable      = self.etl-text(:TAG<ActiveLogicalPartitionSharedIdeProcessorsCapable>,         :$!xml) if self.attribute-is-accessed(self.^name, 'ActiveLogicalPartitionSharedIdeProcessorsCapable');
    $!ActiveMemoryDeduplicationCapable                      = self.etl-text(:TAG<ActiveMemoryDeduplicationCapable>,                         :$!xml) if self.attribute-is-accessed(self.^name, 'ActiveMemoryDeduplicationCapable');
    $!ActiveMemoryExpansionCapable                          = self.etl-text(:TAG<ActiveMemoryExpansionCapable>,                             :$!xml) if self.attribute-is-accessed(self.^name, 'ActiveMemoryExpansionCapable');
    $!ActiveMemoryMirroringCapable                          = self.etl-text(:TAG<ActiveMemoryMirroringCapable>,                             :$!xml) if self.attribute-is-accessed(self.^name, 'ActiveMemoryMirroringCapable');
    $!ActiveMemorySharingCapable                            = self.etl-text(:TAG<ActiveMemorySharingCapable>,                               :$!xml) if self.attribute-is-accessed(self.^name, 'ActiveMemorySharingCapable');
    $!AddressBroadcastPolicyCapable                         = self.etl-text(:TAG<AddressBroadcastPolicyCapable>,                            :$!xml) if self.attribute-is-accessed(self.^name, 'AddressBroadcastPolicyCapable');
    $!AIXCapable                                            = self.etl-text(:TAG<AIXCapable>,                                               :$!xml) if self.attribute-is-accessed(self.^name, 'AIXCapable');
    $!AutorecoveryPowerOnCapable                            = self.etl-text(:TAG<AutorecoveryPowerOnCapable>,                               :$!xml) if self.attribute-is-accessed(self.^name, 'AutorecoveryPowerOnCapable');
    $!BarrierSynchronizationRegisterCapable                 = self.etl-text(:TAG<BarrierSynchronizationRegisterCapable>,                    :$!xml) if self.attribute-is-accessed(self.^name, 'BarrierSynchronizationRegisterCapable');
    $!CapacityOnDemandMemoryCapable                         = self.etl-text(:TAG<CapacityOnDemandMemoryCapable>,                            :$!xml) if self.attribute-is-accessed(self.^name, 'CapacityOnDemandMemoryCapable');
    $!CapacityOnDemandProcessorCapable                      = self.etl-text(:TAG<CapacityOnDemandProcessorCapable>,                         :$!xml) if self.attribute-is-accessed(self.^name, 'CapacityOnDemandProcessorCapable');
    $!CAPICapable                                           = self.etl-text(:TAG<CAPICapable>,                                              :$!xml) if self.attribute-is-accessed(self.^name, 'CAPICapable');
    $!CustomLogicalPartitionPlacementCapable                = self.etl-text(:TAG<CustomLogicalPartitionPlacementCapable>,                   :$!xml) if self.attribute-is-accessed(self.^name, 'CustomLogicalPartitionPlacementCapable');
    $!ElectronicErrorReportingCapable                       = self.etl-text(:TAG<ElectronicErrorReportingCapable>,                          :$!xml) if self.attribute-is-accessed(self.^name, 'ElectronicErrorReportingCapable');
    $!ExternalIntrusionDetectionCapable                     = self.etl-text(:TAG<ExternalIntrusionDetectionCapable>,                        :$!xml) if self.attribute-is-accessed(self.^name, 'ExternalIntrusionDetectionCapable');
    $!FirmwarePowerSaverCapable                             = self.etl-text(:TAG<FirmwarePowerSaverCapable>,                                :$!xml) if self.attribute-is-accessed(self.^name, 'FirmwarePowerSaverCapable');
    $!HardwareDiscoveryCapable                              = self.etl-text(:TAG<HardwareDiscoveryCapable>,                                 :$!xml) if self.attribute-is-accessed(self.^name, 'HardwareDiscoveryCapable');
    $!HardwareMemoryCompressionCapable                      = self.etl-text(:TAG<HardwareMemoryCompressionCapable>,                         :$!xml) if self.attribute-is-accessed(self.^name, 'HardwareMemoryCompressionCapable');
    $!HardwareMemoryEncryptionCapable                       = self.etl-text(:TAG<HardwareMemoryEncryptionCapable>,                          :$!xml) if self.attribute-is-accessed(self.^name, 'HardwareMemoryEncryptionCapable');
    $!HardwarePowerSaverCapable                             = self.etl-text(:TAG<HardwarePowerSaverCapable>,                                :$!xml) if self.attribute-is-accessed(self.^name, 'HardwarePowerSaverCapable');
    $!HostChannelAdapterCapable                             = self.etl-text(:TAG<HostChannelAdapterCapable>,                                :$!xml) if self.attribute-is-accessed(self.^name, 'HostChannelAdapterCapable');
    $!HugePageMemoryCapable                                 = self.etl-text(:TAG<HugePageMemoryCapable>,                                    :$!xml) if self.attribute-is-accessed(self.^name, 'HugePageMemoryCapable');
    $!HugePageMemoryOverrideCapable                         = self.etl-text(:TAG<HugePageMemoryOverrideCapable>,                            :$!xml) if self.attribute-is-accessed(self.^name, 'HugePageMemoryOverrideCapable');
    $!IBMiCapable                                           = self.etl-text(:TAG<IBMiCapable>,                                              :$!xml) if self.attribute-is-accessed(self.^name, 'IBMiCapable');
    $!IBMiLogicalPartitionMobilityCapable                   = self.etl-text(:TAG<IBMiLogicalPartitionMobilityCapable>,                      :$!xml) if self.attribute-is-accessed(self.^name, 'IBMiLogicalPartitionMobilityCapable');
    $!IBMiLogicalPartitionSuspendCapable                    = self.etl-text(:TAG<IBMiLogicalPartitionSuspendCapable>,                       :$!xml) if self.attribute-is-accessed(self.^name, 'IBMiLogicalPartitionSuspendCapable');
    $!IBMiNetworkInstallCapable                             = self.etl-text(:TAG<IBMiNetworkInstallCapable>,                                :$!xml) if self.attribute-is-accessed(self.^name, 'IBMiNetworkInstallCapable');
    $!IBMiRestrictedIOModeCapable                           = self.etl-text(:TAG<IBMiRestrictedIOModeCapable>,                              :$!xml) if self.attribute-is-accessed(self.^name, 'IBMiRestrictedIOModeCapable');
    $!IBMiNetworkInstallVlanCapable                         = self.etl-text(:TAG<IBMiNetworkInstallVlanCapable>,                            :$!xml) if self.attribute-is-accessed(self.^name, 'IBMiNetworkInstallVlanCapable');
    $!InactiveLogicalPartitionMobilityCapable               = self.etl-text(:TAG<InactiveLogicalPartitionMobilityCapable>,                  :$!xml) if self.attribute-is-accessed(self.^name, 'InactiveLogicalPartitionMobilityCapable');
    $!IntelligentPlatformManagementInterfaceCapable         = self.etl-text(:TAG<IntelligentPlatformManagementInterfaceCapable>,            :$!xml) if self.attribute-is-accessed(self.^name, 'IntelligentPlatformManagementInterfaceCapable');
    $!LinuxCapable                                          = self.etl-text(:TAG<LinuxCapable>,                                             :$!xml) if self.attribute-is-accessed(self.^name, 'LinuxCapable');
    $!LogicalHostEthernetAdapterCapable                     = self.etl-text(:TAG<LogicalHostEthernetAdapterCapable>,                        :$!xml) if self.attribute-is-accessed(self.^name, 'LogicalHostEthernetAdapterCapable');
    $!LogicalPartitionAffinityGroupCapable                  = self.etl-text(:TAG<LogicalPartitionAffinityGroupCapable>,                     :$!xml) if self.attribute-is-accessed(self.^name, 'LogicalPartitionAffinityGroupCapable');
    $!LogicalPartitionAvailabilityPriorityCapable           = self.etl-text(:TAG<LogicalPartitionAvailabilityPriorityCapable>,              :$!xml) if self.attribute-is-accessed(self.^name, 'LogicalPartitionAvailabilityPriorityCapable');
    $!LogicalPartitionEnergyManagementCapable               = self.etl-text(:TAG<LogicalPartitionEnergyManagementCapable>,                  :$!xml) if self.attribute-is-accessed(self.^name, 'LogicalPartitionEnergyManagementCapable');
    $!LogicalPartitionProcessorCompatibilityModeCapable     = self.etl-text(:TAG<LogicalPartitionProcessorCompatibilityModeCapable>,        :$!xml) if self.attribute-is-accessed(self.^name, 'LogicalPartitionProcessorCompatibilityModeCapable');
    $!LogicalPartitionRemoteRestartCapable                  = self.etl-text(:TAG<LogicalPartitionRemoteRestartCapable>,                     :$!xml) if self.attribute-is-accessed(self.^name, 'LogicalPartitionRemoteRestartCapable');
    $!LogicalPartitionSuspendCapable                        = self.etl-text(:TAG<LogicalPartitionSuspendCapable>,                           :$!xml) if self.attribute-is-accessed(self.^name, 'LogicalPartitionSuspendCapable');
    $!MemoryMirroringCapable                                = self.etl-text(:TAG<MemoryMirroringCapable>,                                   :$!xml) if self.attribute-is-accessed(self.^name, 'MemoryMirroringCapable');
    $!MicroLogicalPartitionCapable                          = self.etl-text(:TAG<MicroLogicalPartitionCapable>,                             :$!xml) if self.attribute-is-accessed(self.^name, 'MicroLogicalPartitionCapable');
    $!PowerVMLogicalPartitionSimplifiedRemoteRestartCapable = self.etl-text(:TAG<PowerVMLogicalPartitionSimplifiedRemoteRestartCapable>,    :$!xml) if self.attribute-is-accessed(self.^name, 'PowerVMLogicalPartitionSimplifiedRemoteRestartCapable');
    $!RedundantErrorPathReportingCapable                    = self.etl-text(:TAG<RedundantErrorPathReportingCapable>,                       :$!xml) if self.attribute-is-accessed(self.^name, 'RedundantErrorPathReportingCapable');
    $!RemoteRestartToggleCapable                            = self.etl-text(:TAG<RemoteRestartToggleCapable>,                               :$!xml) if self.attribute-is-accessed(self.^name, 'RemoteRestartToggleCapable');
    $!ServiceProcessorConcurrentMaintenanceCapable          = self.etl-text(:TAG<ServiceProcessorConcurrentMaintenanceCapable>,             :$!xml) if self.attribute-is-accessed(self.^name, 'ServiceProcessorConcurrentMaintenanceCapable');
    $!ServiceProcessorFailoverCapable                       = self.etl-text(:TAG<ServiceProcessorFailoverCapable>,                          :$!xml) if self.attribute-is-accessed(self.^name, 'ServiceProcessorFailoverCapable');
    $!ServiceProcessorAutonomicIPLCapable                   = self.etl-text(:TAG<ServiceProcessorAutonomicIPLCapable>,                      :$!xml) if self.attribute-is-accessed(self.^name, 'ServiceProcessorAutonomicIPLCapable');
    $!SharedEthernetFailoverCapable                         = self.etl-text(:TAG<SharedEthernetFailoverCapable>,                            :$!xml) if self.attribute-is-accessed(self.^name, 'SharedEthernetFailoverCapable');
    $!SharedProcessorPoolCapable                            = self.etl-text(:TAG<SharedProcessorPoolCapable>,                               :$!xml) if self.attribute-is-accessed(self.^name, 'SharedProcessorPoolCapable');
    $!SRIOVCapable                                          = self.etl-text(:TAG<SRIOVCapable>,                                             :$!xml) if self.attribute-is-accessed(self.^name, 'SRIOVCapable');
    $!SRIOVRoCECapable                                      = self.etl-text(:TAG<SRIOVRoCECapable>,                                         :$!xml) if self.attribute-is-accessed(self.^name, 'SRIOVRoCECapable');
    $!SwitchNetworkInterfaceMessagePassingCapable           = self.etl-text(:TAG<SwitchNetworkInterfaceMessagePassingCapable>,              :$!xml) if self.attribute-is-accessed(self.^name, 'SwitchNetworkInterfaceMessagePassingCapable');
    $!SystemPartitionProcessorLimitCapable                  = self.etl-text(:TAG<SystemPartitionProcessorLimitCapable>,                     :$!xml) if self.attribute-is-accessed(self.^name, 'SystemPartitionProcessorLimitCapable');
    $!Telnet5250ApplicationCapable                          = self.etl-text(:TAG<Telnet5250ApplicationCapable>,                             :$!xml) if self.attribute-is-accessed(self.^name, 'Telnet5250ApplicationCapable');
    $!TurboCoreCapable                                      = self.etl-text(:TAG<TurboCoreCapable>,                                         :$!xml) if self.attribute-is-accessed(self.^name, 'TurboCoreCapable');
    $!VirtualEthernetAdapterDynamicLogicalPartitionCapable  = self.etl-text(:TAG<VirtualEthernetAdapterDynamicLogicalPartitionCapable>,     :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualEthernetAdapterDynamicLogicalPartitionCapable');
    $!VirtualEthernetQualityOfServiceCapable                = self.etl-text(:TAG<VirtualEthernetQualityOfServiceCapable>,                   :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualEthernetQualityOfServiceCapable');
    $!VirtualFiberChannelCapable                            = self.etl-text(:TAG<VirtualFiberChannelCapable>,                               :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualFiberChannelCapable');
    $!VirtualIOServerCapable                                = self.etl-text(:TAG<VirtualIOServerCapable>,                                   :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualIOServerCapable');
    $!VirtualizationEngineTechnologiesActivationCapable     = self.etl-text(:TAG<VirtualizationEngineTechnologiesActivationCapable>,        :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualizationEngineTechnologiesActivationCapable');
    $!VirtualServerNetworkingPhase2Capable                  = self.etl-text(:TAG<VirtualServerNetworkingPhase2Capable>,                     :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualServerNetworkingPhase2Capable');
    $!VirtualSwitchCapable                                  = self.etl-text(:TAG<VirtualSwitchCapable>,                                     :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualSwitchCapable');
    $!VirtualTrustedPlatformModuleCapable                   = self.etl-text(:TAG<VirtualTrustedPlatformModuleCapable>,                      :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualTrustedPlatformModuleCapable');
    $!VLANStatisticsCapable                                 = self.etl-text(:TAG<VLANStatisticsCapable>,                                    :$!xml) if self.attribute-is-accessed(self.^name, 'VLANStatisticsCapable');
    $!VirtualEthernetCustomMACAddressCapable                = self.etl-text(:TAG<VirtualEthernetCustomMACAddressCapable>,                   :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualEthernetCustomMACAddressCapable');
    $!ManagementVLANForControlChannelCapable                = self.etl-text(:TAG<ManagementVLANForControlChannelCapable>,                   :$!xml) if self.attribute-is-accessed(self.^name, 'ManagementVLANForControlChannelCapable');
    $!VirtualNICDedicatedSRIOVCapable                       = self.etl-text(:TAG<VirtualNICDedicatedSRIOVCapable>,                          :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualNICDedicatedSRIOVCapable');
    $!VirtualNICSharedSRIOVCapable                          = self.etl-text(:TAG<VirtualNICSharedSRIOVCapable>,                             :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualNICSharedSRIOVCapable');
    $!DynamicPlatformOptimizationCapable                    = self.etl-text(:TAG<DynamicPlatformOptimizationCapable>,                       :$!xml) if self.attribute-is-accessed(self.^name, 'DynamicPlatformOptimizationCapable');
    $!VirtualNICFailOverCapable                             = self.etl-text(:TAG<VirtualNICFailOverCapable>,                                :$!xml) if self.attribute-is-accessed(self.^name, 'VirtualNICFailOverCapable');
    $!AdvancedBootListSupportCapable                        = self.etl-text(:TAG<AdvancedBootListSupportCapable>,                           :$!xml) if self.attribute-is-accessed(self.^name, 'AdvancedBootListSupportCapable');
    $!DynamicSimplifiedRemoteRestartToggleCapable           = self.etl-text(:TAG<DynamicSimplifiedRemoteRestartToggleCapable>,              :$!xml) if self.attribute-is-accessed(self.^name, 'DynamicSimplifiedRemoteRestartToggleCapable');
    $!IBMiNativeIOCapable                                   = self.etl-text(:TAG<IBMiNativeIOCapable>,                                      :$!xml) if self.attribute-is-accessed(self.^name, 'IBMiNativeIOCapable');
    $!CustomPhysicalPageTableRatioCapable                   = self.etl-text(:TAG<CustomPhysicalPageTableRatioCapable>,                      :$!xml) if self.attribute-is-accessed(self.^name, 'CustomPhysicalPageTableRatioCapable');
    $!HardwareAcceleratorCapable                            = self.etl-text(:TAG<HardwareAcceleratorCapable>,                               :$!xml) if self.attribute-is-accessed(self.^name, 'HardwareAcceleratorCapable');
    $!PlatformMemoryMirroringCapableIfLicensed              = self.etl-text(:TAG<PlatformMemoryMirroringCapableIfLicensed>,                 :$!xml) if self.attribute-is-accessed(self.^name, 'PlatformMemoryMirroringCapableIfLicensed');
    $!PlatformMemoryMirroringLicensed                       = self.etl-text(:TAG<PlatformMemoryMirroringLicensed>,                          :$!xml) if self.attribute-is-accessed(self.^name, 'PlatformMemoryMirroringLicensed');
    $!PlatformMemoryMirroringCapabilityKnown                = self.etl-text(:TAG<PlatformMemoryMirroringCapabilityKnown>,                   :$!xml) if self.attribute-is-accessed(self.^name, 'PlatformMemoryMirroringCapabilityKnown');
    $!PartitionSecureBootCapable                            = self.etl-text(:TAG<PartitionSecureBootCapable>,                               :$!xml) if self.attribute-is-accessed(self.^name, 'PartitionSecureBootCapable');
    $!DedicatedProcessorPartitionCapable                    = self.etl-text(:TAG<DedicatedProcessorPartitionCapable>,                       :$!xml) if self.attribute-is-accessed(self.^name, 'DedicatedProcessorPartitionCapable');
    $!PersistentMemoryCapable                               = self.etl-text(:TAG<PersistentMemoryCapable>,                                  :$!xml) if self.attribute-is-accessed(self.^name, 'PersistentMemoryCapable');
    $!SRIOVMigrationCapable                                 = self.etl-text(:TAG<SRIOVMigrationCapable>,                                    :$!xml) if self.attribute-is-accessed(self.^name, 'SRIOVMigrationCapable');
    $!xml                                                   = Nil;
    $!initialized                                           = True;
    self;
}

=finish
